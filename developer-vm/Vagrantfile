require "yaml"
settings = YAML.load_file "settings.yaml"

Vagrant.configure("2") do |config|

  config.ssh.insert_key = false

 config.vm.define "master" do |master|
    master.vm.box = settings["vm"]["box"]
    master.vm.hostname = settings["vm"]["hostname"]
    #network
    master.vm.network "private_network", ip: settings["vm"]["network"]["ip"]

   if settings["docker"]["install"] == true
    master.vm.provision "shell",
      env: {
        "VERSION" => settings["docker"]["version"],
      },
      path: "scripts/docker.sh"
   end

   if settings["kubernetes"]["install"] == true
    master.vm.provision "shell", reboot: true,
      env: {
        "KUBERNETES_VERSION" => settings["kubernetes"]["version"],
        "CRIO_OS" => settings["kubernetes"]["cri-o"]["os"],
        "CRIO_VERSION" => settings["kubernetes"]["cri-o"]["version"],
        "IP" => settings["vm"]["network"]["ip"]
      },
      path: "scripts/kubernetes/kubernetes.sh"
   end

   if settings["kubernetes"]["extensions"]["rabbitmq"]["install"] == true
    master.vm.provision "shell", privileged: false,
      env: {
        "IMAGE" => settings["kubernetes"]["extensions"]["rabbitmq"]["image"],
        "BROKER_PORT" => settings["kubernetes"]["extensions"]["rabbitmq"]["access"]["broker"]["port"],
        "MANAGER_PORT" => settings["kubernetes"]["extensions"]["rabbitmq"]["access"]["manager"]["port"],
      },
      path: "scripts/kubernetes/extensions/rabbitmq.sh"
   end

   if settings["kubernetes"]["extensions"]["log"]["install"] == true
    master.vm.provision "shell", privileged: false,
      env: {
        "FLUENTD_IMAGE" => settings["kubernetes"]["extensions"]["log"]["fluentd"]["image"],
        "KIBANA_IMAGE" => settings["kubernetes"]["extensions"]["log"]["kibana"]["image"],
        "KIBANA_PORT" => settings["kubernetes"]["extensions"]["log"]["kibana"]["access"]["port"],
        "ELASTICSEARCH_IMAGE" => settings["kubernetes"]["extensions"]["log"]["elasticsearch"]["image"]
      },
      path: "scripts/kubernetes/extensions/log.sh"
   end

  master.vm.provider "virtualbox" do |vb|
    vb.name = settings["vm"]["name"]
    vb.cpus = settings["vm"]["requirements"]["core"]
    vb.memory = settings["vm"]["requirements"]["memory"]
  end
 end

end
